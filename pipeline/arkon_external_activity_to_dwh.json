{
	"name": "arkon_external_activity_to_dwh",
	"properties": {
		"activities": [
			{
				"name": "Silver transform to Gold dwh",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Extraction from SQL Database",
						"dependencyConditions": [
							"Skipped"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "silver_layer_parquet",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"sparkPool": {
						"referenceName": "arkonpool",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Small",
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"driverSize": "Small",
					"numExecutors": null,
					"authentication": {
						"type": "MSI"
					}
				}
			},
			{
				"name": "Copy into - bronze to SQL Database",
				"description": "En esta face del ETL hemos creado antes una actividad: \"Copy Into\" la cual automatiza la copia del csv raw dentro del Blob Storage, pasandolo a nuestra Base de datos relacional (Dedicated SQL Pool) que también funciona como Datawarehouse\n\nCopy into, tiene una modalidad automática para hacer esa copia, además de una forma manual. En este Script lo utilizamos como un simple Query para validar, ya que el proceso lo hicimos automático anteriormente en los contenedores Linkeados del storage, y sólo validamos que la tabla pueda consultar desde la Base de datos  Relacional creada con los datos integrados (T-SQL)",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_synapse_conection",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "SELECT TOP 100 * FROM dbo.sql_workers_raw;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Gold External Tables",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Gold data to dwh and sql",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_synapse_conection",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "NonQuery",
							"text": "IF EXISTS (\n    SELECT 1 FROM sys.external_tables WHERE name = 'workers_by_fullname'\n)\nBEGIN\n    DROP EXTERNAL TABLE workers_by_fullname;\nEND;\n\n-- Crear tabla externa workers_by_fullname\nCREATE EXTERNAL TABLE workers_by_fullname (\n    full_name VARCHAR(255),\n    company_name VARCHAR(255),\n    address VARCHAR(255),\n    city VARCHAR(100),\n    county VARCHAR(100),\n    state CHAR(2),\n    zip INT,\n    phone1 VARCHAR(20),\n    phone2 VARCHAR(20),\n    email VARCHAR(255),\n    web VARCHAR(255)\n)\nWITH (\n    LOCATION = 'silver_layer/workers_by_fullname.parquet',\n    DATA_SOURCE = blob_storage,\n    FILE_FORMAT = ParquetFormat\n);\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Gold data to dwh and sql",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Silver transform to Gold dwh",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_synapse_conection",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "SELECT TOP 100 * FROM dbo.sql_bigcities_dwh_gold;\n\nSELECT TOP 100 * FROM dbo.sql_byfullname_dwh_gold;\n\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Extraction from SQL Database",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Copy into - bronze to SQL Database",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "raw_conector_to_sql",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"sparkPool": {
						"referenceName": "arkonpool",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Small",
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"driverSize": "Small",
					"numExecutors": null,
					"authentication": {
						"type": "MSI"
					}
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2025-07-12T03:58:36Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}